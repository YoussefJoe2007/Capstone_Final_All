@{

    Layout = null;
}
<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Medical Assistant UI</title>

    <!-- Google Material Icons -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@32,400,0,0" />

    <!-- Favicon -->
    <style>
        /* Force hide sidebar by default - highest priority */
        .sidebar:not(.active) {
            display: none !important;
        }
        
        .sidebar-overlay:not(.active) {
            display: none !important;
        }
        
        @@import url("https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap");
        @@import url("https://fonts.googleapis.com/css2?family=Cairo:wght@300;400;500;600;700&display=swap");

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: "Cairo", "Poppins", sans-serif;
        }

        :root {
            --text-color: #ffffff;
            --subheading-color: #b8c5d6;
            --placeholder-color: #8fa3c2;
            --primary-color: #0f172a;
            --secondary-color: #1e293b;
            --secondary-hover-color: #334155;
            --scrollbar-color: #64748b;
            --accent-color: #3b82f6;
            --accent-hover: #2563eb;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --danger-color: #ef4444;
            --border-radius: 16px;
            --shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
            --shadow-hover: 0 20px 40px rgba(0, 0, 0, 0.3);
            --gradient-primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --gradient-secondary: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            --gradient-accent: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        }

        body.light-theme {
            --primary-color: #f8fafc;
            --secondary-color: #ffffff;
            --secondary-hover-color: #f1f5f9;
            --text-color: #1e293b;
            --subheading-color: #64748b;
            --placeholder-color: #94a3b8;
            --scrollbar-color: #94a3b8;
            --shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            --shadow-hover: 0 20px 40px rgba(0, 0, 0, 0.15);
        }

        body {
            color: var(--text-color);
            background: var(--primary-color);
            transition: all 0.3s ease;
            overflow-x: hidden;
        }

        /* Custom Scrollbar */
        ::-webkit-scrollbar {
            width: 14px;
            z-index: 1001;
        }

        ::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.15);
            border-radius: 10px;
            z-index: 1001;
            margin: 5px;
        }

        ::-webkit-scrollbar-thumb {
            background: var(--accent-color);
            border-radius: 10px;
            border: 2px solid transparent;
            background-clip: content-box;
            z-index: 1001;
            min-height: 50px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: var(--accent-hover);
            background-clip: content-box;
            z-index: 1001;
        }

        /* For Firefox */
        .container {
            scrollbar-width: thin;
            scrollbar-color: var(--accent-color) rgba(255, 255, 255, 0.15);
        }

        /* Ensure scrollbar appears above blur */
        .container::-webkit-scrollbar {
            position: relative;
            z-index: 1001;
            background: rgba(255, 255, 255, 0.05);
        }

        .container::-webkit-scrollbar-track {
            position: relative;
            z-index: 1001;
            background: rgba(255, 255, 255, 0.15);
            border-radius: 10px;
            margin: 5px;
        }

        .container::-webkit-scrollbar-thumb {
            position: relative;
            z-index: 1001;
            background: var(--accent-color);
            border-radius: 10px;
            border: 2px solid transparent;
            background-clip: content-box;
            min-height: 50px;
        }

        .container::-webkit-scrollbar-thumb:hover {
            background: var(--accent-hover);
            background-clip: content-box;
        }

        .container {
            overflow-y: auto;
            padding: 20px 0 80px;
            height: 100vh;
            scrollbar-color: var(--scrollbar-color) transparent;
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
            scrollbar-width: thin;
            position: relative;
            z-index: 1;
        }

        /* Ensure scrollbar is always visible */
        .container::-webkit-scrollbar {
            width: 12px;
            background: rgba(255, 255, 255, 0.05);
        }

        .container::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            margin: 5px;
        }

        .container::-webkit-scrollbar-thumb {
            background: var(--scrollbar-color);
            border-radius: 10px;
            border: 2px solid transparent;
            background-clip: content-box;
            min-height: 50px;
        }

        .container::-webkit-scrollbar-thumb:hover {
            background: var(--secondary-hover-color);
            background-clip: content-box;
        }

        .container :where(.app-header, .suggestions, .message, .prompt-wrapper) {
            position: relative;
            margin: 0 auto;
            width: 100%;
            padding: 0 24px;
            max-width: 1200px;
        }

        .container .app-header {
            margin-top: 2vh;
            text-align: center;
            animation: fadeInUp 0.8s ease-out;
        }

        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .app-header .heading {
            width: fit-content;
            margin: 0 auto;
            font-size: 3.5rem;
            font-weight: 700;
            background: var(--gradient-primary);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            -moz-background-clip: text;
            text-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            position: relative;
        }

        .app-header .heading::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 60px;
            height: 4px;
            background: var(--gradient-accent);
            border-radius: 2px;
        }

        .app-header .sub-heading {
            font-size: 1.8rem;
            margin-top: 20px;
            color: var(--subheading-color);
            font-weight: 400;
            line-height: 1.6;
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
        }

        .container .suggestions {
            width: 100%;
            list-style: none;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
            margin-top: 8vh;
            margin-bottom: 8vh;
            padding: 0 24px;
            animation: fadeInUp 1s ease-out 0.2s both;
        }

        body.chats-active .container :where(.app-header, .suggestions) {
            display: none;
        }

        .suggestions .suggestions-item {
            cursor: pointer;
            padding: 24px;
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            border-radius: var(--border-radius);
            background: var(--secondary-color);
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: var(--shadow);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
        }

        .suggestions .suggestions-item::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: var(--gradient-accent);
            transform: scaleX(0);
            transition: transform 0.3s ease;
        }

        .suggestions .suggestions-item:hover {
            transform: translateY(-8px);
            box-shadow: var(--shadow-hover);
            border-color: var(--accent-color);
        }

        .suggestions .suggestions-item:hover::before {
            transform: scaleX(1);
        }

        .suggestions .suggestions-item .text {
            font-size: 1.1rem;
            font-weight: 500;
            line-height: 1.6;
            margin-bottom: 20px;
            color: var(--text-color);
        }

        .suggestions .suggestions-item .icon {
            width: 50px;
            height: 50px;
            display: flex;
            font-size: 1.6rem;
            align-items: center;
            border-radius: 12px;
            justify-content: center;
            color: #ffffff;
            background: var(--gradient-primary);
            box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
            transition: all 0.3s ease;
        }

        .suggestions .suggestions-item:hover .icon {
            transform: scale(1.1) rotate(5deg);
        }

        .suggestions .suggestions-item:nth-child(2) .icon {
            background: var(--gradient-secondary);
            box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
        }

        .suggestions .suggestions-item:nth-child(3) .icon {
            background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);
            box-shadow: 0 4px 12px rgba(245, 158, 11, 0.3);
        }

        .suggestions .suggestions-item:nth-child(4) .icon {
            background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
            box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);
        }

        .container .chats-container {
            display: flex;
            gap: 24px;
            flex-direction: column;
            padding: 0 24px;
            max-width: 900px;
            margin: 0 auto;
        }

        .chats-container .message {
            display: flex;
            gap: 16px;
            align-items: flex-start;
            animation: slideInMessage 0.5s ease-out;
        }

        @@keyframes slideInMessage {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .chats-container .message .avatar {
            width: 48px;
            height: 48px;
            flex-shrink: 0;
            border-radius: 50%;
            padding: 8px;
            background: var(--gradient-primary);
            border: 2px solid var(--accent-color);
            box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
            transition: all 0.3s ease;
        }

        .chats-container .message.loading .avatar {
            animation: pulse 2s infinite;
        }

        @@keyframes pulse {
            0%, 100% {
                transform: scale(1);
                opacity: 1;
            }
            50% {
                transform: scale(1.05);
                opacity: 0.8;
            }
        }

        .chats-container .message .message-text {
            padding: 16px 20px;
            word-wrap: break-word;
            white-space: pre-line;
            line-height: 1.6;
            font-size: 1rem;
            border-radius: var(--border-radius);
            background: var(--secondary-color);
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: var(--shadow);
            max-width: 80%;
            position: relative;
        }

        .chats-container .bot-message {
            margin: 8px 0;
        }

        .chats-container .bot-message .message-text {
            background: linear-gradient(135deg, var(--secondary-color) 0%, rgba(59, 130, 246, 0.1) 100%);
            border-left: 4px solid var(--accent-color);
        }

        .chats-container .user-message {
            flex-direction: row-reverse;
            align-items: flex-end;
        }

        .chats-container .user-message .message-text {
            background: var(--gradient-accent);
            color: #ffffff;
            border: none;
            text-align: right;
            border-right: 4px solid var(--accent-hover);
        }

        .chats-container .user-message .img-attachment {
            margin-top: 12px;
            width: 200px;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            border: 2px solid var(--accent-color);
        }

        .chats-container .user-message .file-attachment {
            display: flex;
            gap: 12px;
            align-items: center;
            padding: 16px;
            margin-top: 12px;
            border-radius: var(--border-radius);
            background: var(--secondary-color);
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: var(--shadow);
            max-width: 300px;
        }

        .chats-container .user-message .file-attachment span {
            color: var(--accent-color);
            font-size: 1.2rem;
        }

        .container .prompt-container {
            position: fixed;
            width: 100%;
            left: 0;
            bottom: 0;
            padding: 20px 0;
            background: linear-gradient(to top, var(--primary-color) 0%, transparent 100%);
            backdrop-filter: blur(10px);
            z-index: 999;
            pointer-events: none;
        }

        .prompt-container .prompt-wrapper {
            pointer-events: auto;
        }

        .prompt-container :where(.prompt-wrapper, .prompt-form, .prompt-actions) {
            display: flex;
            gap: 16px;
            height: 64px;
            align-items: center;
        }

        .prompt-container .prompt-form {
            height: 100%;
            width: 100%;
            border-radius: 32px;
            background: var(--secondary-color);
            border: 2px solid rgba(255, 255, 255, 0.1);
            box-shadow: var(--shadow);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .prompt-form:focus-within {
            border-color: var(--accent-color);
            box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.1);
        }

        .prompt-form .prompt-input {
            width: 100%;
            height: 100%;
            background: none;
            outline: none;
            border: none;
            font-size: 1.1rem;
            color: var(--text-color);
            padding: 0 24px;
            font-weight: 400;
        }

        .prompt-form .prompt-input::placeholder {
            color: var(--placeholder-color);
            font-weight: 400;
        }

        .prompt-wrapper button {
            width: 64px;
            height: 100%;
            flex-shrink: 0;
            cursor: pointer;
            border-radius: 50%;
            font-size: 1.6rem;
            border: none;
            color: var(--text-color);
            background: var(--secondary-color);
            box-shadow: var(--shadow);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
        }

        .prompt-wrapper button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
            transition: left 0.5s;
        }

        .prompt-wrapper button:hover::before {
            left: 100%;
        }

        .prompt-wrapper :is(button:hover, #cancel-file-btn, .file-icon) {
            background: var(--secondary-hover-color);
            transform: translateY(-2px);
            box-shadow: var(--shadow-hover);
        }

        .prompt-form .prompt-actions {
            gap: 8px;
            margin-right: 12px;
        }

        .prompt-wrapper .prompt-form :where(.file-upload-wrapper, button, img) {
            position: relative;
            height: 52px;
            width: 52px;
        }

        .prompt-form .prompt-actions #send-prompt-btn {
            color: #ffffff;
            display: none;
            background: var(--gradient-accent);
            box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
        }

        .prompt-form .prompt-input:valid ~ .prompt-actions #send-prompt-btn {
            display: block;
            animation: bounceIn 0.5s ease-out;
        }

        @@keyframes bounceIn {
            0% {
                transform: scale(0);
            }
            50% {
                transform: scale(1.1);
            }
            100% {
                transform: scale(1);
            }
        }

        .prompt-form #send-prompt-btn:hover {
            background: var(--accent-hover);
            transform: translateY(-2px) scale(1.05);
        }

        .prompt-form .file-upload-wrapper :where(button, img) {
            display: none;
            border-radius: 50%;
            object-fit: cover;
            position: absolute;
            left: 6px;
        }

        .prompt-form .file-upload-wrapper.active #add-file-btn {
            display: none;
        }

        .prompt-form .file-upload-wrapper #add-file-btn,
        .prompt-form .file-upload-wrapper.active.img-attached img,
        .prompt-form .file-upload-wrapper.active.file-attached .file-icon,
        .prompt-form .file-upload-wrapper.active:hover #cancel-file-btn {
            display: block;
        }

        .prompt-form :is(#stop-response-btn:hover, #cancel-file-btn) {
            color: var(--danger-color);
            background: rgba(239, 68, 68, 0.1);
        }

        .prompt-wrapper .prompt-form .file-icon {
            color: var(--accent-color);
        }

        .prompt-form #stop-response-btn,
        body.bot-responding .prompt-form .file-upload-wrapper {
            display: none;
        }

        body.bot-responding .prompt-form #stop-response-btn {
            display: block;
            animation: pulse 2s infinite;
        }

        .prompt-container .disclaimer-text {
            font-size: 0.9rem;
            text-align: center;
            padding: 16px 24px 0;
            color: var(--placeholder-color);
            opacity: 0.8;
        }

        /* Enhanced Theme Toggle Button */
        .theme-toggle-btn {
            position: fixed;
            top: 24px;
            right: 24px;
            background: var(--secondary-color);
            color: var(--text-color);
            border: 2px solid rgba(255, 255, 255, 0.1);
            padding: 12px;
            border-radius: 50%;
            cursor: pointer;
            font-size: 1.4rem;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            z-index: 1001;
            box-shadow: var(--shadow);
            backdrop-filter: blur(10px);
        }

        .theme-toggle-btn:hover {
            background: var(--secondary-hover-color);
            transform: rotate(180deg) scale(1.1);
            box-shadow: var(--shadow-hover);
        }

        /* Sidebar Toggle Button */
        #sidebar-toggle-btn {
            position: fixed;
            top: 24px;
            background: var(--secondary-color);
            color: var(--accent-color);
            border: 2px solid rgba(59, 130, 246, 0.2);
            padding: 12px;
            border-radius: 50%;
            cursor: pointer;
            font-size: 1.4rem;
            transition: all 0.3s ease;
            z-index: 1001;
            box-shadow: var(--shadow);
            backdrop-filter: blur(10px);
        }

        /* RTL (Arabic) - Toggle button on right */
        [dir="rtl"] #sidebar-toggle-btn {
            right: 24px;
            left: auto;
        }

        /* LTR (English) - Toggle button on left */
        [dir="ltr"] #sidebar-toggle-btn {
            left: 24px;
            right: auto;
        }

        #sidebar-toggle-btn:hover {
            background: rgba(59, 130, 246, 0.1);
            transform: scale(1.1);
            box-shadow: var(--shadow-hover);
        }

        /* Delete Button */
        #delete-chats-btn {
            position: fixed;
            top: 24px;
            background: var(--secondary-color);
            color: var(--danger-color);
            border: 2px solid rgba(239, 68, 68, 0.2);
            padding: 12px;
            border-radius: 50%;
            cursor: pointer;
            font-size: 1.4rem;
            transition: all 0.3s ease;
            z-index: 1001;
            box-shadow: var(--shadow);
            backdrop-filter: blur(10px);
        }

        /* RTL (Arabic) - Delete button on right */
        [dir="rtl"] #delete-chats-btn {
            right: 80px;
            left: auto;
        }

        /* LTR (English) - Delete button on left */
        [dir="ltr"] #delete-chats-btn {
            left: 80px;
            right: auto;
        }

        #delete-chats-btn:hover {
            background: rgba(239, 68, 68, 0.1);
            transform: scale(1.1);
            box-shadow: var(--shadow-hover);
        }

        /* Sidebar */
        .sidebar {
            position: fixed;
            top: 0;
            width: 300px;
            height: 100vh;
            background: var(--secondary-color);
            box-shadow: var(--shadow-hover);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            z-index: 999;
            overflow-y: auto;
            backdrop-filter: blur(10px);
            /* Ensure sidebar is hidden by default */
            display: none !important;
        }

        /* RTL (Arabic) - Sidebar on right */
        [dir="rtl"] .sidebar {
            right: -300px;
            left: auto;
            border-left: 1px solid rgba(255, 255, 255, 0.1);
        }

        [dir="rtl"] .sidebar.active {
            right: 0;
            left: auto;
            display: block !important;
        }

        /* LTR (English) - Sidebar on left */
        [dir="ltr"] .sidebar {
            left: -300px;
            right: auto;
            border-right: 1px solid rgba(255, 255, 255, 0.1);
        }

        [dir="ltr"] .sidebar.active {
            left: 0;
            right: auto;
            display: block !important;
        }

        .sidebar-header {
            padding: 24px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            text-align: center;
        }

        .sidebar-header h3 {
            color: var(--text-color);
            font-size: 1.4rem;
            font-weight: 600;
            margin: 0;
        }

        .sidebar-content {
            padding: 20px;
        }

        .sidebar-section {
            margin-bottom: 30px;
        }

        .sidebar-section h4 {
            color: var(--accent-color);
            font-size: 1.1rem;
            margin-bottom: 15px;
            font-weight: 500;
        }

        .sidebar-item {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 12px;
            margin-bottom: 8px;
            border-radius: var(--border-radius);
            background: rgba(255, 255, 255, 0.05);
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .sidebar-item:hover {
            background: rgba(59, 130, 246, 0.1);
            transform: translateX(5px);
        }

        .sidebar-item .icon {
            color: var(--accent-color);
            font-size: 1.2rem;
        }

        .sidebar-item .text {
            color: var(--text-color);
            font-size: 0.95rem;
        }

        /* Chat history items */
        .chat-history-item {
            display: flex;
            flex-direction: column;
            gap: 8px;
            padding: 12px;
            margin-bottom: 8px;
            border-radius: var(--border-radius);
            background: rgba(255, 255, 255, 0.05);
            cursor: pointer;
            transition: all 0.3s ease;
            border-left: 3px solid transparent;
        }

        .chat-history-item:hover {
            background: rgba(59, 130, 246, 0.1);
            border-left-color: var(--accent-color);
            transform: translateX(5px);
        }

        .chat-history-item.active {
            background: rgba(59, 130, 246, 0.15);
            border-left-color: var(--accent-color);
        }

        .chat-history-item .chat-title {
            color: var(--text-color);
            font-size: 0.9rem;
            font-weight: 500;
            margin: 0;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .chat-history-item .chat-preview {
            color: var(--subheading-color);
            font-size: 0.8rem;
            margin: 0;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .chat-history-item .chat-time {
            color: var(--placeholder-color);
            font-size: 0.75rem;
            margin: 0;
        }

        .no-chats-message {
            color: var(--subheading-color);
            font-size: 0.9rem;
            text-align: center;
            padding: 20px;
            font-style: italic;
        }

        /* Overlay */
        .sidebar-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: none !important;
            transition: all 0.3s ease;
            z-index: 998;
        }

        .sidebar-overlay.active {
            display: block !important;
        }

        /* Adjust container when sidebar is open */
        /* RTL (Arabic) - Container margin on right */
        [dir="rtl"] body.sidebar-open .container {
            margin-right: 300px;
            margin-left: 0;
            transition: margin-right 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        }

        /* LTR (English) - Container margin on left */
        [dir="ltr"] body.sidebar-open .container {
            margin-left: 300px;
            margin-right: 0;
            transition: margin-left 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        }

        /* RTL (Arabic) - Hover effects */
        [dir="rtl"] .sidebar-item:hover {
            transform: translateX(5px);
        }

        [dir="rtl"] .chat-history-item:hover {
            transform: translateX(5px);
        }

        /* LTR (English) - Hover effects */
        [dir="ltr"] .sidebar-item:hover {
            transform: translateX(-5px);
        }

        [dir="ltr"] .chat-history-item:hover {
            transform: translateX(-5px);
        }

        /* Message direction support */
        [dir="ltr"] .chats-container .user-message {
            flex-direction: row;
        }

        [dir="ltr"] .chats-container .user-message .message-text {
            text-align: left;
            border-left: 4px solid var(--accent-hover);
            border-right: none;
        }

        [dir="ltr"] .chats-container .bot-message .message-text {
            border-left: none;
            border-right: 4px solid var(--accent-color);
        }

        /* Loading Animation */
        .loading-dots {
            display: inline-block;
        }

        .loading-dots::after {
            content: '';
            animation: dots 1.5s steps(5, end) infinite;
        }

        @@keyframes dots {
            0%, 20% {
                content: '';
            }
            40% {
                content: '.';
            }
            60% {
                content: '..';
            }
            80%, 100% {
                content: '...';
            }
        }

        /* Loading message styling */
        .message.loading .message-text {
            color: var(--subheading-color);
            font-style: italic;
        }

        /* Responsive Design */
        @@media (max-width: 768px) {
            .container {
                padding: 16px 0 100px;
            }

            .app-header .heading {
                font-size: 2.5rem;
            }

            .app-header .sub-heading {
                font-size: 1.4rem;
            }

            .container .suggestions {
                grid-template-columns: 1fr;
                gap: 16px;
                margin-top: 6vh;
                padding: 0 16px;
            }

            .suggestions .suggestions-item {
                padding: 20px;
            }

            .container .chats-container {
                gap: 16px;
                padding: 0 16px;
            }

            .chats-container .message .message-text {
                max-width: 85%;
                padding: 14px 16px;
                font-size: 0.95rem;
            }

            .prompt-container :where(.prompt-wrapper, .prompt-form, .prompt-actions) {
                gap: 12px;
                height: 56px;
            }

            .prompt-container button {
                width: 56px;
            }

            .prompt-form :is(.file-upload-wrapper, button, img) {
                height: 44px;
                width: 44px;
            }

            .prompt-form .prompt-input {
                padding: 0 20px;
                font-size: 1rem;
            }

            .theme-toggle-btn,
            #delete-chats-btn,
            #sidebar-toggle-btn {
                top: 16px;
                padding: 10px;
                font-size: 1.2rem;
            }

            .theme-toggle-btn {
                right: 16px;
            }

            /* RTL (Arabic) - Mobile positioning */
            [dir="rtl"] #delete-chats-btn {
                right: 80px;
                left: auto;
            }

            [dir="rtl"] #sidebar-toggle-btn {
                right: 16px;
                left: auto;
            }

            /* LTR (English) - Mobile positioning */
            [dir="ltr"] #delete-chats-btn {
                left: 80px;
                right: auto;
            }

            [dir="ltr"] #sidebar-toggle-btn {
                left: 16px;
                right: auto;
            }

            /* Mobile sidebar adjustments */
            .sidebar {
                width: 280px;
            }

            /* RTL (Arabic) - Mobile container margin */
            [dir="rtl"] body.sidebar-open .container {
                margin-right: 0;
            }

            /* LTR (English) - Mobile container margin */
            [dir="ltr"] body.sidebar-open .container {
                margin-left: 0;
            }
        }

        @@media (max-width: 480px) {
            .app-header .heading {
                font-size: 2rem;
            }

            .app-header .sub-heading {
                font-size: 1.2rem;
            }

            .suggestions .suggestions-item .text {
                font-size: 1rem;
            }

            .chats-container .message .message-text {
                max-width: 90%;
                padding: 12px 14px;
            }
        }

        /* Material Icons */
        .material-symbols-rounded {
            font-family: 'Material Symbols Rounded';
            font-weight: normal;
            font-style: normal;
            font-size: 24px;
            line-height: 1;
            letter-spacing: normal;
            text-transform: none;
            display: inline-block;
            white-space: nowrap;
            word-wrap: normal;
            direction: ltr;
            -webkit-font-feature-settings: 'liga';
            -webkit-font-smoothing: antialiased;
        }

        .logo-container {
            margin-bottom: 22px;
            border-bottom: 1px solid rgba(255,255,255,0.1);
            padding-bottom: 18px;
            text-align: center;
        }


    </style>
</head>

<body>
    <div class="container">

        <!-- Header Section -->
        <header class="app-header">
            <h1 class="heading">مرحباً بك في المساعد الطبي</h1>
            <h4 class="sub-heading">كيف يمكنني مساعدتك اليوم؟</h4>
        </header>

        <!-- Suggested Prompts -->
        <ul class="suggestions">
            <li class="suggestions-item">
                <p class="text">عندي صداع مستمر، ممكن تشخص حالتي؟</p>
                <span class="icon material-symbols-rounded">psychology</span>
            </li>
            <li class="suggestions-item">
                <p class="text">ما هي النصائح للوقاية من نزلات البرد؟</p>
                <span class="icon material-symbols-rounded">health_and_safety</span>
            </li>
            <li class="suggestions-item">
                <p class="text">أشعر بألم في المعدة بعد الأكل، ما السبب؟</p>
                <span class="icon material-symbols-rounded">stethoscope</span>
            </li>
            <li class="suggestions-item">
                <p class="text">كيف أفرق بين أعراض الحساسية ونزلة البرد؟</p>
                <span class="icon material-symbols-rounded">sick</span>
            </li>
            <li class="suggestions-item">
                <p class="text">طفلي يعاني من ارتفاع في الحرارة، ماذا أفعل؟</p>
                <span class="icon material-symbols-rounded">child_care</span>
            </li>
            <li class="suggestions-item">
                <p class="text">ظهرت لي بقع حمراء على الجلد، هل هي حساسية أم شيء آخر؟</p>
                <span class="icon material-symbols-rounded">dermatology</span>
            </li>
            <li class="suggestions-item">
                <p class="text">أشعر بخفقان في القلب وضيق تنفس، هل أحتاج لطبيب قلب؟</p>
                <span class="icon material-symbols-rounded">favorite</span>
            </li>
            <li class="suggestions-item">
                <p class="text">أعاني من توتر وقلق دائم، كيف أتعامل مع ذلك؟</p>
                <span class="icon material-symbols-rounded">self_improvement</span>
            </li>
            <li class="suggestions-item">
                <p class="text">ما الفرق بين أعراض السكر وأعراض الضغط؟</p>
                <span class="icon material-symbols-rounded">monitor_heart</span>
            </li>

        </ul>

        <!-- Chat Container -->
        <div class="chats-container"></div>

        <!-- Prompt Input Section -->
        <div class="prompt-container">
            <div class="prompt-wrapper">
                <form action="#" class="prompt-form">
                    <input type="text" placeholder="اكتب رسالتك هنا..." class="prompt-input" required />

                    <div class="prompt-actions">

                        <!-- File Upload Section -->
                        <div class="file-upload-wrapper">
                            <img src="#" alt="معاينة الملف" class="file-preview" />
                            <input id="file-input" type="file" accept="image/*, .pdf, .txt, .csv" hidden />
                            <button type="button" class="file-icon material-symbols-rounded">description</button>
                            <button id="cancel-file-btn" type="button" class="material-symbols-rounded">close</button>
                            <button id="add-file-btn" type="button" class="material-symbols-rounded">attach_file</button>
                        </div>

                        <!-- Control Buttons -->
                        <button id="stop-response-btn" type="button" class="material-symbols-rounded">stop_circle</button>
                        <button id="send-prompt-btn" class="material-symbols-rounded">arrow_upward</button>
                    </div>
                </form>

                <!-- Extra Actions -->
                <button id="theme-toggle-btn" class="material-symbols-rounded">light_mode</button>
            </div>

        </div>

    </div>

    <!-- Sidebar Toggle Button -->
    <button id="sidebar-toggle-btn" class="material-symbols-rounded">menu</button>

    <!-- Sidebar -->
    <div class="sidebar" style="display: none;">
        <div class="logo-container">
            <img src="~/images/Logo3.png" alt="Logo" />
        </div>
        <div class="sidebar-content">
                        <div class="sidebar-section">
                <h4>الوظائف السريعة</h4>
                <div class="sidebar-item" onclick="startNewChat()">
                    <span class="icon material-symbols-rounded">add</span>
                    <span class="text">محادثة جديدة</span>
                </div>
                <div class="sidebar-item" onclick="clearChats()">
                    <span class="icon material-symbols-rounded">delete_sweep</span>
                    <span class="text">حذف المحادثات</span>
                </div>
                <div class="sidebar-item" onclick="toggleTheme()">
                    <span class="icon material-symbols-rounded">light_mode</span>
                    <span class="text">تبديل المظهر</span>
                </div>
                <div class="sidebar-item" onclick="toggleLanguage()">
                    <span class="icon material-symbols-rounded">language</span>
                    <span class="text">تغيير اللغة</span>
                </div>
            </div>

            <div class="sidebar-section">
                <h4>المحادثات السابقة</h4>
                <div id="chat-history-list">
                    <!-- Chat history items will be added here dynamically -->
                </div>
                <div class="sidebar-item" onclick="loadAllChats()" id="load-all-chats-btn" style="display: none;">
                    <span class="icon material-symbols-rounded">history</span>
                    <span class="text">عرض جميع المحادثات</span>
                </div>
            </div>
            
            <div class="sidebar-section">
                <h4>الاقتراحات الطبية</h4>
                <div class="sidebar-item" onclick="addSuggestion('عندي صداع مستمر، ممكن تشخص حالتي؟')">
                    <span class="icon material-symbols-rounded">psychology</span>
                    <span class="text">تشخيص الصداع</span>
                </div>
                <div class="sidebar-item" onclick="addSuggestion('ما هي النصائح للوقاية من نزلات البرد؟')">
                    <span class="icon material-symbols-rounded">health_and_safety</span>
                    <span class="text">نصائح البرد</span>
                </div>
                <div class="sidebar-item" onclick="addSuggestion('أشعر بألم في المعدة بعد الأكل، ما السبب؟')">
                    <span class="icon material-symbols-rounded">stethoscope</span>
                    <span class="text">ألم المعدة</span>
                </div>
                <div class="sidebar-item" onclick="addSuggestion('كيف أفرق بين أعراض الحساسية ونزلة البرد؟')">
                    <span class="icon material-symbols-rounded">sick</span>
                    <span class="text">الحساسية والبرد</span>
                </div>
            </div>

        </div>
    </div>

    <!-- Sidebar Overlay -->
    <div class="sidebar-overlay" style="display: none;"></div>


    <script>
        // Immediately hide sidebar when script starts
        document.addEventListener('DOMContentLoaded', function() {
            const sidebar = document.querySelector(".sidebar");
            const sidebarOverlay = document.querySelector(".sidebar-overlay");
            
            if (sidebar) {
                sidebar.style.display = "none";
                sidebar.classList.remove("active");
            }
            if (sidebarOverlay) {
                sidebarOverlay.style.display = "none";
                sidebarOverlay.classList.remove("active");
            }
        });
        
        const container = document.querySelector(".container");
        const chatsContainer = document.querySelector(".chats-container");
        const promptForm = document.querySelector(".prompt-form");
        const promptInput = promptForm?.querySelector(".prompt-input");
        const fileInput = promptForm?.querySelector("#file-input");
        const fileUploadWrapper = promptForm?.querySelector(".file-upload-wrapper");
        const themeToggleBtn = document.querySelector("#theme-toggle-btn");
        const deleteChatsBtn = document.querySelector("#delete-chats-btn");
        if (!deleteChatsBtn) {
            console.warn("Delete chats button not found");
        }
        const sidebarToggleBtn = document.querySelector("#sidebar-toggle-btn");
        const sidebar = document.querySelector(".sidebar");
        const sidebarOverlay = document.querySelector(".sidebar-overlay");
        
        // Immediately hide sidebar on DOM load
        if (sidebar) {
            sidebar.style.display = "none";
            sidebar.classList.remove("active");
        }
        if (sidebarOverlay) {
            sidebarOverlay.style.display = "none";
            sidebarOverlay.classList.remove("active");
        }
        
        // Check if essential elements exist
        if (!container || !chatsContainer || !promptForm || !promptInput) {
            console.error("Essential elements not found");
        }
        
        // API Setup
        const API_KEY = "AIzaSyAfR--wxwSuRC9yuFl-ubdyayxc8Wpb6Vc";
        const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${API_KEY}`;
        
        let controller, typingInterval;
        const chatHistory = [];
        const userData = { message: "", file: {} };
        const savedChats = JSON.parse(localStorage.getItem('savedChats') || '[]');
        let currentChatId = null;
        
        // Language management
        const currentLanguage = localStorage.getItem('language') || 'ar';
        
        // Function to update language UI
        const updateLanguageUI = () => {
            try {
                const currentLang = localStorage.getItem('language') || 'ar';
                const t = {
                    ar: {
                        welcome: "أهلاً وسهلاً! أنا مساعدك الطبي الذكي 🤖",
                        services: "يمكنني مساعدتك في:",
                        service1: "تشخيص الأعراض البسيطة",
                        service2: "نصائح صحية عامة", 
                        service3: "معلومات عن الأمراض",
                        service4: "إرشادات للرعاية الصحية",
                        prompt: "اكتب لي ما تشعر به أو اختر من الاقتراحات أدناه! 👇",
                        placeholder: "اكتب رسالتك هنا...",
                        loading: "جاري التفكير...",
                        newChat: "محادثة جديدة",
                        deleteChats: "حذف المحادثات",
                        toggleTheme: "تبديل المظهر",
                        changeLanguage: "تغيير اللغة",
                        previousChats: "المحادثات السابقة",
                        quickActions: "الوظائف السريعة",
                        noChats: "لا توجد محادثات محفوظة",
                        loadAllChats: "عرض جميع المحادثات",
                        confirmDelete: "هل أنت متأكد من حذف جميع المحادثات المحفوظة؟",
                        sidebarTitle: "القائمة الجانبية",
                        arabic: "العربية",
                        english: "English"
                    },
                    en: {
                        welcome: "Welcome! I'm your smart medical assistant 🤖",
                        services: "I can help you with:",
                        service1: "Diagnosing simple symptoms",
                        service2: "General health tips",
                        service3: "Information about diseases", 
                        service4: "Healthcare guidelines",
                        prompt: "Tell me what you feel or choose from the suggestions below! 👇",
                        placeholder: "Write your message here...",
                        loading: "Thinking...",
                        newChat: "New Chat",
                        deleteChats: "Delete Chats",
                        toggleTheme: "Toggle Theme",
                        changeLanguage: "Change Language",
                        previousChats: "Previous Chats",
                        quickActions: "Quick Actions",
                        noChats: "No saved chats",
                        loadAllChats: "Load All Chats",
                        confirmDelete: "Are you sure you want to delete all saved chats?",
                        sidebarTitle: "Sidebar Menu",
                        arabic: "العربية",
                        english: "English"
                    }
                };
                
                // Update header
                const heading = document.querySelector('.heading');
                const subHeading = document.querySelector('.sub-heading');
                if (heading) heading.textContent = currentLang === 'ar' ? 'مرحباً بك في المساعد الطبي' : 'Welcome to Medical Assistant';
                if (subHeading) subHeading.textContent = currentLang === 'ar' ? 'كيف يمكنني مساعدتك اليوم؟' : 'How can I help you today?';
                
                // Update sidebar sections
                const sidebarSections = document.querySelectorAll('.sidebar-section h4');
                if (sidebarSections[0]) sidebarSections[0].textContent = currentLang === 'ar' ? t.ar.quickActions : t.en.quickActions;
                if (sidebarSections[1]) sidebarSections[1].textContent = currentLang === 'ar' ? t.ar.previousChats : t.en.previousChats;
                
                // Update sidebar items
                const sidebarItems = document.querySelectorAll('.sidebar-item .text');
                if (sidebarItems[0]) sidebarItems[0].textContent = currentLang === 'ar' ? t.ar.newChat : t.en.newChat;
                if (sidebarItems[1]) sidebarItems[1].textContent = currentLang === 'ar' ? t.ar.deleteChats : t.en.deleteChats;
                if (sidebarItems[2]) sidebarItems[2].textContent = currentLang === 'ar' ? t.ar.toggleTheme : t.en.toggleTheme;
                if (sidebarItems[3]) sidebarItems[3].textContent = currentLang === 'ar' ? t.ar.changeLanguage : t.en.changeLanguage;
                if (sidebarItems[4]) sidebarItems[4].textContent = currentLang === 'ar' ? t.ar.loadAllChats : t.en.loadAllChats;
                
                // Update placeholder
                if (promptInput) promptInput.placeholder = currentLang === 'ar' ? t.ar.placeholder : t.en.placeholder;
                
                // Update suggestions
                if (typeof updateSuggestions === 'function') {
                    updateSuggestions();
                }
            } catch (error) {
                console.error('Error updating language UI:', error);
            }
        };

        // Function to update suggestions based on language
        const updateSuggestions = () => {
            const currentLang = localStorage.getItem('language') || 'ar';
            const suggestions = currentLang === 'ar' ? [
                "عندي صداع مستمر، ممكن تشخص حالتي؟",
                "ما هي النصائح للوقاية من نزلات البرد؟",
                "أشعر بألم في المعدة بعد الأكل، ما السبب؟",
                "كيف أفرق بين أعراض الحساسية ونزلة البرد؟",
                "طفلي يعاني من ارتفاع في الحرارة، ماذا أفعل؟",
                "ظهرت لي بقع حمراء على الجلد، هل هي حساسية أم شيء آخر؟",
                "أشعر بخفقان في القلب وضيق تنفس، هل أحتاج لطبيب قلب؟",
                "أعاني من توتر وقلق دائم، كيف أتعامل مع ذلك؟",
                "ما الفرق بين أعراض السكر وأعراض الضغط؟"
            ] : [
                "I have a persistent headache, can you diagnose my condition?",
                "What are the tips for preventing colds?",
                "I feel stomach pain after eating, what's the cause?",
                "How do I distinguish between allergy symptoms and a cold?",
                "My child has a high fever, what should I do?",
                "Red spots appeared on my skin, is it an allergy or something else?",
                "I feel heart palpitations and shortness of breath, do I need a cardiologist?",
                "I suffer from constant stress and anxiety, how do I deal with it?",
                "What's the difference between diabetes symptoms and blood pressure symptoms?"
            ];
            
            const suggestionElements = document.querySelectorAll('.suggestions-item .text');
            suggestionElements.forEach((element, index) => {
                if (element && suggestions[index]) {
                    element.textContent = suggestions[index];
                }
            });
        };

        // Function to create message elements
        const createMessageElement = (content, ...classes) => {
            if (!content) return null;
            
            const div = document.createElement("div");
            div.classList.add("message", ...classes);
            div.innerHTML = content;
            return div;
        };
        
        // Scroll to the bottom of the container
        const scrollToBottom = () => {
            if (container) {
                container.scrollTo({ top: container.scrollHeight, behavior: "smooth" });
            }
        };
        
        // Enhanced typing effect for bot responses
        const typingEffect = (text, textElement, botMsgDiv) => {
            if (!textElement || !botMsgDiv) return;
            
            textElement.textContent = "";
            const words = text.split(" ");
            let wordIndex = 0;
            
            // Clear the loading message and start typing the actual response
            textElement.textContent = "";
            
            // Set an interval to type each word
            typingInterval = setInterval(() => {
                if (wordIndex < words.length) {
                    textElement.textContent += (wordIndex === 0 ? "" : " ") + words[wordIndex++];
                    if (typeof scrollToBottom === 'function') {
                        scrollToBottom();
                    }
                } else {
                    clearInterval(typingInterval);
                    botMsgDiv.classList.remove("loading");
                    document.body.classList.remove("bot-responding");
                }
            }, 50);
        };
        
        const generateResponse = async (botMsgDiv) => {
            if (!botMsgDiv) return;
            
            const textElement = botMsgDiv.querySelector(".message-text");
            if (!textElement) return;
            
            controller = new AbortController();
            
            // Add user message and file data to the chat history
            const userParts = [{ text: userData.message }];
            if (userData.file.data) {
                if (userData.file.isImage) {
                    userParts.push({
                        inline_data: {
                            mime_type: userData.file.mime_type,
                            data: userData.file.data
                        }
                    });
                }
            }
            
            chatHistory.push({
                role: "user",
                parts: userParts
            });
            
            try {
                const response = await fetch(API_URL, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ 
                        contents: chatHistory,
                        generationConfig: {
                            temperature: 0.7,
                            topK: 40,
                            topP: 0.95,
                            maxOutputTokens: 1024,
                        }
                    }),
                    signal: controller.signal,
                });
                
                const data = await response.json();
                if (!response.ok) {
                    throw new Error(data.error?.message || 'حدث خطأ في الاتصال');
                }
                
                if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
                    throw new Error('لم يتم استلام رد صحيح من الخادم');
                }
                
                const responseText = data.candidates[0].content.parts[0].text.replace(/\*\*([^*]+)\*\*/g, "$1").trim();
                if (typeof typingEffect === 'function') {
                    typingEffect(responseText, textElement, botMsgDiv);
                }
                chatHistory.push({ role: "model", parts: [{ text: responseText }] });
                if (typeof saveCurrentChat === 'function') {
                    saveCurrentChat(); // Save chat after each response
                }
            } catch (error) {
                console.error('API Error:', error);
                textElement.textContent = error.name === "AbortError" ? "تم إيقاف الاستجابة." : 
                    (error.message.includes('API') ? "حدث خطأ في الاتصال بالخادم. يرجى المحاولة مرة أخرى." : error.message);
                textElement.style.color = "#ef4444";
                botMsgDiv.classList.remove("loading");
                document.body.classList.remove("bot-responding");
                if (typeof scrollToBottom === 'function') {
                    scrollToBottom();
                }
            } finally {
                userData.file = {};
                if (typeof hideLoading === 'function') {
                    hideLoading();
                }
            }
        };
        
        const handleFormSubmit = (e) => {
            e.preventDefault();
            if (!promptInput || !chatsContainer) return;
            
            const userMessage = promptInput.value.trim();
            if (!userMessage || document.body.classList.contains("bot-responding")) return;
            
            showLoading();
            userData.message = userMessage;
            promptInput.value = "";
            document.body.classList.add("chats-active", "bot-responding");
            if (fileUploadWrapper) {
                fileUploadWrapper.classList.remove("file-attached", "img-attached", "active");
            }
            
            const userMsgHTML = `
                <p class="message-text"></p>
                ${userData.file.data ? (userData.file.isImage ? `<img src="data:${userData.file.mime_type};base64,${userData.file.data}" class="img-attachment" />` : `<p class="file-attachment"><span class="material-symbols-rounded">description</span>${userData.file.fileName}</p>`) : ""}
            `;
            
            if (typeof createMessageElement === 'function') {
                const userMsgDiv = createMessageElement(userMsgHTML, "user-message");
                if (userMsgDiv) {
                    const messageText = userMsgDiv.querySelector(".message-text");
                    if (messageText) {
                        messageText.textContent = userData.message;
                    }
                    chatsContainer.appendChild(userMsgDiv);
                    if (typeof scrollToBottom === 'function') {
                        scrollToBottom();
                    }
                    
                    setTimeout(() => {
                        const t = {
                            ar: {
                                loading: "جاري التفكير...",
                                newChat: "محادثة جديدة",
                                deleteChats: "حذف المحادثات",
                                toggleTheme: "تبديل المظهر",
                                changeLanguage: "تغيير اللغة",
                                loadAllChats: "عرض جميع المحادثات",
                                confirmDelete: "هل أنت متأكد من حذف جميع المحادثات المحفوظة؟",
                                sidebarTitle: "القائمة الجانبية",
                                arabic: "العربية",
                                english: "English"
                            },
                            en: {
                                loading: "Thinking...",
                                newChat: "New Chat",
                                deleteChats: "Delete Chats",
                                toggleTheme: "Toggle Theme",
                                changeLanguage: "Change Language",
                                loadAllChats: "Load All Chats",
                                confirmDelete: "Are you sure you want to delete all saved chats?",
                                sidebarTitle: "Sidebar Menu",
                                arabic: "العربية",
                                english: "English"
                            }
                        };
                        const botMsgHTML = `<img class="avatar" src="/images/Logo.png" /> <p class="message-text">${t.ar.loading}</p>`;
                        const botMsgDiv = createMessageElement(botMsgHTML, "bot-message", "loading");
                        if (botMsgDiv) {
                            chatsContainer.appendChild(botMsgDiv);
                            if (typeof scrollToBottom === 'function') {
                                scrollToBottom();
                            }
                            if (typeof generateResponse === 'function') {
                                generateResponse(botMsgDiv);
                            }
                        }
                    }, 600);
                }
            }
        };
        
        // Handle file input change (file upload)
        if (fileInput) {
            fileInput.addEventListener("change", () => {
            const file = fileInput.files[0];
            if (!file) return;
            
            // Check file size (max 10MB)
            if (file.size > 10 * 1024 * 1024) {
                alert("حجم الملف كبير جداً. الحد الأقصى 10 ميجابايت.");
                fileInput.value = "";
                return;
            }
            
            const isImage = file.type.startsWith("image/");
            const allowedTypes = ["image/jpeg", "image/png", "image/gif", "image/webp", "application/pdf", "text/plain", "text/csv"];
            
            if (!allowedTypes.includes(file.type)) {
                alert("نوع الملف غير مدعوم. الأنواع المدعومة: صور، PDF، نص.");
                fileInput.value = "";
                return;
            }
            
            const reader = new FileReader();
            reader.readAsDataURL(file);
            
            reader.onload = (e) => {
                fileInput.value = "";
                const base64String = e.target.result.split(",")[1];
                if (fileUploadWrapper) {
                    const filePreview = fileUploadWrapper.querySelector(".file-preview");
                    if (filePreview) {
                        filePreview.src = e.target.result;
                    }
                    fileUploadWrapper.classList.add("active", isImage ? "img-attached" : "file-attached");
                }
                
                // Store file data in userData obj
                userData.file = { 
                    fileName: file.name, 
                    data: base64String, 
                    mime_type: file.type, 
                    isImage,
                    size: file.size
                };
            };
            
            reader.onerror = () => {
                alert("حدث خطأ في قراءة الملف. يرجى المحاولة مرة أخرى.");
                fileInput.value = "";
            };
        });
        }
        
        // Cancel file upload
        const cancelFileBtn = document.querySelector("#cancel-file-btn");
        if (cancelFileBtn) {
            cancelFileBtn.addEventListener("click", () => {
                userData.file = {};
                fileUploadWrapper.classList.remove("file-attached", "img-attached", "active");
            });
        }
        
        // Stop Bot Response
        const stopResponseBtn = document.querySelector("#stop-response-btn");
        if (stopResponseBtn) {
            stopResponseBtn.addEventListener("click", () => {
                controller?.abort();
                userData.file = {};
                clearInterval(typingInterval);
                const loadingMessage = chatsContainer.querySelector(".bot-message.loading");
                if (loadingMessage) {
                    loadingMessage.classList.remove("loading");
                }
                document.body.classList.remove("bot-responding");
            });
        }
        
        // Enhanced theme toggle with smooth transition
        if (themeToggleBtn) {
            themeToggleBtn.addEventListener("click", () => {
            const isLightTheme = document.body.classList.toggle("light-theme");
            localStorage.setItem("themeColor", isLightTheme ? "light_mode" : "dark_mode");
            themeToggleBtn.textContent = isLightTheme ? "dark_mode" : "light_mode";
            
            // Add a subtle animation
            themeToggleBtn.style.transform = "rotate(360deg) scale(1.2)";
            setTimeout(() => {
                themeToggleBtn.style.transform = "";
            }, 300);
        });
        }
        
        // Sidebar toggle functionality
        if (sidebarToggleBtn) {
            sidebarToggleBtn.addEventListener("click", () => {
                if (sidebar) {
                    const isActive = sidebar.classList.toggle("active");
                    if (isActive) {
                        // Show sidebar when opening
                        sidebar.style.display = "block";
                    } else {
                        // Hide sidebar when closing
                        sidebar.style.display = "none";
                    }
                }
                if (sidebarOverlay) {
                    const isOverlayActive = sidebarOverlay.classList.toggle("active");
                    if (isOverlayActive) {
                        // Show overlay when opening
                        sidebarOverlay.style.display = "block";
                    } else {
                        // Hide overlay when closing
                        sidebarOverlay.style.display = "none";
                    }
                }
                document.body.classList.toggle("sidebar-open");
                
                // Add animation to button
                sidebarToggleBtn.style.transform = "rotate(90deg) scale(1.1)";
                setTimeout(() => {
                    sidebarToggleBtn.style.transform = "";
                }, 300);
            });
        }

        // Close sidebar when clicking overlay
        if (sidebarOverlay) {
            sidebarOverlay.addEventListener("click", () => {
                sidebar.classList.remove("active");
                sidebarOverlay.classList.remove("active");
                document.body.classList.remove("sidebar-open");
                
                // Add inline styles when closing
                if (sidebar) {
                    sidebar.style.display = "none";
                }
                if (sidebarOverlay) {
                    sidebarOverlay.style.display = "none";
                }
            });
        }

        // Close sidebar with Escape key
        document.addEventListener("keydown", (e) => {
            if (e.key === "Escape" && sidebar && sidebar.classList.contains("active")) {
                sidebar.classList.remove("active");
                if (sidebarOverlay) {
                    sidebarOverlay.classList.remove("active");
                }
                document.body.classList.remove("sidebar-open");
                
                // Add inline styles when closing
                if (sidebar) {
                    sidebar.style.display = "none";
                }
                if (sidebarOverlay) {
                    sidebarOverlay.style.display = "none";
                }
            }
        });

        // Sidebar functions
        window.clearChats = () => {
            const t = {
                ar: {
                    confirmDelete: "هل أنت متأكد من حذف جميع المحادثات؟",
                    noChats: "لا توجد محادثات محفوظة",
                    loadAllChats: "عرض جميع المحادثات",
                    sidebarTitle: "القائمة الجانبية",
                    arabic: "العربية",
                    english: "English"
                },
                en: {
                    confirmDelete: "Are you sure you want to delete all chats?",
                    noChats: "No saved chats",
                    loadAllChats: "Load All Chats",
                    sidebarTitle: "Sidebar Menu",
                    arabic: "العربية",
                    english: "English"
                }
            };
            if (confirm(t.ar.confirmDelete)) {
                savedChats.length = 0;
                localStorage.removeItem('savedChats');
                chatHistory.length = 0;
                if (chatsContainer) {
                    chatsContainer.innerHTML = "";
                }
                currentChatId = null;
                document.body.classList.remove("chats-active", "bot-responding");
                if (typeof updateChatHistoryList === 'function') {
                    updateChatHistoryList();
                }
                if (typeof closeSidebar === 'function') {
                    closeSidebar();
                }
            }
        };

        window.toggleTheme = () => {
            const isLightTheme = document.body.classList.toggle("light-theme");
            localStorage.setItem("themeColor", isLightTheme ? "light_mode" : "dark_mode");
            if (themeToggleBtn) {
                themeToggleBtn.textContent = isLightTheme ? "dark_mode" : "light_mode";
            }
        };

        window.toggleLanguage = () => {
            const currentLang = localStorage.getItem('language') || 'ar';
            const newLanguage = currentLang === 'ar' ? 'en' : 'ar';
            localStorage.setItem('language', newLanguage);
            
            // Update page direction
            document.documentElement.lang = newLanguage;
            document.documentElement.dir = newLanguage === 'ar' ? 'rtl' : 'ltr';
            
            // Close sidebar when changing language to avoid layout issues
            if (typeof closeSidebar === 'function') {
                closeSidebar();
            }
            
            // Update UI immediately
            if (typeof updateLanguageUI === 'function') {
                updateLanguageUI();
            }
            
            // Force reflow to ensure proper layout
            setTimeout(() => {
                if (typeof scrollToBottom === 'function') {
                    scrollToBottom();
                }
            }, 100);
        };

        window.exportChats = () => {
            if (chatHistory.length === 0) {
                alert("لا توجد محادثات للتصدير");
                return;
            }
            
            const chatText = chatHistory.map(msg => 
                `${msg.role === 'user' ? 'أنت' : 'المساعد'}: ${msg.parts[0].text}`
            ).join('\n\n');
            
            const blob = new Blob([chatText], { type: 'text/plain;charset=utf-8' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `chat-export-${new Date().toISOString().split('T')[0]}.txt`;
            a.click();
            URL.revokeObjectURL(url);
            if (typeof closeSidebar === 'function') {
                closeSidebar();
            }
        };

        // Chat history management
        const saveCurrentChat = () => {
            if (chatHistory.length > 0) {
                const chatId = currentChatId || Date.now().toString();
                const chatTitle = chatHistory[0]?.parts[0]?.text?.substring(0, 50) || 'محادثة جديدة';
                const chatPreview = chatHistory[chatHistory.length - 1]?.parts[0]?.text?.substring(0, 100) || '';
                
                const chatData = {
                    id: chatId,
                    title: chatTitle,
                    preview: chatPreview,
                    history: [...chatHistory],
                    timestamp: new Date().toISOString()
                };
                
                // Remove existing chat if updating
                const existingIndex = savedChats.findIndex(chat => chat.id === chatId);
                if (existingIndex !== -1) {
                    savedChats.splice(existingIndex, 1);
                }
                
                // Add new chat at the beginning
                savedChats.unshift(chatData);
                
                // Keep only last 20 chats
                if (savedChats.length > 20) {
                    savedChats.splice(20);
                }
                
                localStorage.setItem('savedChats', JSON.stringify(savedChats));
                if (typeof updateChatHistoryList === 'function') {
                    updateChatHistoryList();
                }
            }
        };

        const updateChatHistoryList = () => {
            const chatList = document.getElementById('chat-history-list');
            const loadAllBtn = document.getElementById('load-all-chats-btn');
            
            if (!chatList) return;
            
            if (savedChats.length === 0) {
                const t = {
                    ar: {
                        noChats: "لا توجد محادثات محفوظة",
                        loadAllChats: "عرض جميع المحادثات",
                        sidebarTitle: "القائمة الجانبية",
                        arabic: "العربية",
                        english: "English"
                    },
                    en: {
                        noChats: "No saved chats",
                        loadAllChats: "Load All Chats",
                        sidebarTitle: "Sidebar Menu",
                        arabic: "العربية",
                        english: "English"
                    }
                };
                chatList.innerHTML = `<div class="no-chats-message">${t.ar.noChats}</div>`;
                if (loadAllBtn) {
                    loadAllBtn.style.display = 'none';
                }
                return;
            }
            
            if (loadAllBtn) {
                loadAllBtn.style.display = 'block';
            }
            chatList.innerHTML = '';
            
            savedChats.forEach(chat => {
                const chatItem = document.createElement('div');
                chatItem.className = 'chat-history-item';
                if (chat.id === currentChatId) {
                    chatItem.classList.add('active');
                }
                
                const time = new Date(chat.timestamp).toLocaleString('ar-EG', {
                    month: 'short',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
                
                chatItem.innerHTML = `
                    <div class="chat-title">${chat.title}</div>
                    <div class="chat-preview">${chat.preview}</div>
                    <div class="chat-time">${time}</div>
                `;
                
                chatItem.addEventListener('click', () => {
                    if (typeof loadChat === 'function') {
                        loadChat(chat.id);
                    }
                });
                chatList.appendChild(chatItem);
            });
        };

        const loadChat = (chatId) => {
            const chat = savedChats.find(c => c.id === chatId);
            if (chat && chatsContainer && typeof createMessageElement === 'function') {
                currentChatId = chatId;
                chatHistory.length = 0;
                chatHistory.push(...chat.history);
                
                // Clear current display
                chatsContainer.innerHTML = '';
                
                // Recreate chat display
                chat.history.forEach(msg => {
                    if (msg.role === 'user') {
                        const userMsgHTML = `<p class="message-text">${msg.parts[0].text}</p>`;
                        const userMsgDiv = createMessageElement(userMsgHTML, "user-message");
                        if (userMsgDiv) {
                            chatsContainer.appendChild(userMsgDiv);
                        }
                    } else if (msg.role === 'model') {
                        const botMsgHTML = `<img class="avatar" src="/images/Logo.png" /> <p class="message-text">${msg.parts[0].text}</p>`;
                        const botMsgDiv = createMessageElement(botMsgHTML, "bot-message");
                        if (botMsgDiv) {
                            chatsContainer.appendChild(botMsgDiv);
                        }
                    }
                });
                
                document.body.classList.add("chats-active");
                if (typeof updateChatHistoryList === 'function') {
                    updateChatHistoryList();
                }
                if (typeof closeSidebar === 'function') {
                    closeSidebar();
                }
                if (typeof scrollToBottom === 'function') {
                    scrollToBottom();
                }
            }
        };

        const startNewChat = () => {
            if (typeof saveCurrentChat === 'function') {
                saveCurrentChat(); // Save current chat before starting new one
            }
            currentChatId = null;
            chatHistory.length = 0;
            if (chatsContainer) {
                chatsContainer.innerHTML = '';
            }
            document.body.classList.remove("chats-active", "bot-responding");
            if (typeof updateChatHistoryList === 'function') {
                updateChatHistoryList();
            }
        };

        window.loadAllChats = () => {
            if (savedChats.length > 0 && typeof loadChat === 'function') {
                loadChat(savedChats[0].id);
            }
        };

        window.addSuggestion = (text) => {
            if (promptInput && promptForm) {
                promptInput.value = text;
                promptForm.dispatchEvent(new Event("submit"));
            }
            if (typeof closeSidebar === 'function') {
                closeSidebar();
            }
        };

        const closeSidebar = () => {
            if (sidebar) {
                sidebar.classList.remove("active");
                // Add inline styles when closing
                sidebar.style.display = "none";
            }
            if (sidebarOverlay) {
                sidebarOverlay.classList.remove("active");
                // Add inline styles when closing
                sidebarOverlay.style.display = "none";
            }
            document.body.classList.remove("sidebar-open");
        };

        // Delete all chats with confirmation
        if (deleteChatsBtn) {
            deleteChatsBtn.addEventListener("click", () => {
                const t = {
                    ar: {
                        confirmDelete: "هل أنت متأكد من حذف جميع المحادثات؟",
                        sidebarTitle: "القائمة الجانبية",
                        arabic: "العربية",
                        english: "English"
                    },
                    en: {
                        confirmDelete: "Are you sure you want to delete all chats?",
                        sidebarTitle: "Sidebar Menu",
                        arabic: "العربية",
                        english: "English"
                    }
                };
                if (confirm(t.ar.confirmDelete)) {
                    chatHistory.length = 0;
                    chatsContainer.innerHTML = "";
                    document.body.classList.remove("chats-active", "bot-responding");
                    
                    // Add a subtle animation
                    deleteChatsBtn.style.transform = "scale(0.8)";
                    setTimeout(() => {
                        deleteChatsBtn.style.transform = "";
                    }, 200);
                }
            });
        }
        
        // Handle suggestions click with enhanced feedback
        document.querySelectorAll(".suggestions-item").forEach((suggestion) => {
            suggestion.addEventListener("click", () => {
                // Add click animation
                suggestion.style.transform = "scale(0.95)";
                setTimeout(() => {
                    suggestion.style.transform = "";
                }, 150);
                
                const textElement = suggestion.querySelector(".text");
                if (textElement && promptInput && promptForm) {
                    promptInput.value = textElement.textContent;
                    promptForm.dispatchEvent(new Event("submit"));
                }
            });
        });
        
        // Show/hide controls for mobile on prompt input focus
        document.addEventListener("click", ({ target }) => {
            const wrapper = document.querySelector(".prompt-wrapper");
            if (wrapper) {
                const shouldHide = target.classList.contains("prompt-input") || (wrapper.classList.contains("hide-controls") && (target.id === "add-file-btn" || target.id === "stop-response-btn"));
                wrapper.classList.toggle("hide-controls", shouldHide);
            }
        });
        
        // Add event listeners for form submission and file input click
        if (promptForm) {
            promptForm.addEventListener("submit", handleFormSubmit);
            const addFileBtn = promptForm.querySelector("#add-file-btn");
            if (addFileBtn) {
                addFileBtn.addEventListener("click", () => fileInput.click());
            }
        }
        
        // Add keyboard shortcuts
        document.addEventListener("keydown", (e) => {
            if (e.ctrlKey && e.key === "Enter" && promptForm) {
                promptForm.dispatchEvent(new Event("submit"));
            }
            // Enter key to send message
            if (e.key === "Enter" && !e.shiftKey && promptInput === document.activeElement && promptForm) {
                e.preventDefault();
                promptForm.dispatchEvent(new Event("submit"));
            }
        });
        
        // Add loading state for better UX
        const showLoading = () => {
            if (promptInput) {
                promptInput.disabled = true;
                promptInput.placeholder = "جاري الإرسال...";
            }
        };
        
        const hideLoading = () => {
            if (promptInput) {
                promptInput.disabled = false;
                const t = {
                    ar: {
                        placeholder: "شبيك لبيك.. اطلب واتمنى ✨",
                        arabic: "العربية",
                        english: "English"
                    },
                    en: {
                        placeholder: "Your wish is my command.. ask and wish ✨",
                        arabic: "العربية",
                        english: "English"
                    }
                };
                                 promptInput.placeholder = "اكتب رسالتك هنا...";
            }
        };
        
        // Add smooth scroll behavior for better UX
        if (container) {
            container.style.scrollBehavior = "smooth";
            
            // Force scrollbar to be visible
            container.style.overflowY = "scroll";
        }
        
        // Add some content to ensure scrollbar appears
        setTimeout(() => {
            if (container && container.scrollHeight <= container.clientHeight) {
                const spacer = document.createElement("div");
                spacer.style.height = "200vh";
                spacer.style.width = "1px";
                spacer.style.opacity = "0";
                container.appendChild(spacer);
            }
        }, 100);
        
        // Set initial language and theme
        const isLightTheme = localStorage.getItem("themeColor") === "light_mode";
        document.body.classList.toggle("light-theme", isLightTheme);
        if (themeToggleBtn) {
            themeToggleBtn.textContent = isLightTheme ? "dark_mode" : "light_mode";
        }
        
        // Set initial language
        const initialLanguage = localStorage.getItem('language') || 'ar';
        document.documentElement.lang = initialLanguage;
        document.documentElement.dir = initialLanguage === 'ar' ? 'rtl' : 'ltr';
        
        // Ensure sidebar is hidden on page load
        if (sidebar) {
            sidebar.classList.remove("active");
            // Force hide sidebar with inline styles as backup
            sidebar.style.display = "none";
        }
        if (sidebarOverlay) {
            sidebarOverlay.classList.remove("active");
            // Force hide overlay with inline styles as backup
            sidebarOverlay.style.display = "none";
        }
        document.body.classList.remove("sidebar-open");
        
        // Initialize chat history list
        if (typeof updateChatHistoryList === 'function') {
            updateChatHistoryList();
        }
        
        // Update language UI after DOM is loaded
        if (typeof updateLanguageUI === 'function') {
            updateLanguageUI();
        }
        
        // Final check to ensure sidebar is hidden
        setTimeout(() => {
            if (sidebar && !sidebar.classList.contains("active")) {
                sidebar.style.display = "none";
            }
            if (sidebarOverlay && !sidebarOverlay.classList.contains("active")) {
                sidebarOverlay.style.display = "none";
            }
        }, 100);

    </script>
</body>
</html>
