﻿@using UsersApp.ViewModels;
@model ChangePasswordViewModel;

@{
    ViewData["Title"] = "Change Password";
    Layout = "~/Views/Shared/_AccountLayout.cshtml";
}

<style>
    .form-control.is-invalid {
        border-color: #dc3545;
        box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
    }
    
    .form-control.is-valid {
        border-color: #28a745;
        box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);
    }
    
    .validation-message {
        font-size: 0.875rem;
        margin-top: 0.25rem;
        display: block;
    }
    
    .password-strength {
        margin-top: 0.5rem;
        font-size: 0.875rem;
    }
    
    .strength-weak { color: #dc3545; }
    .strength-medium { color: #ffc107; }
    .strength-strong { color: #28a745; }
    
    .error-message {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
        display: none;
    }
</style>

<div class="account-container">
    <div class="account-box">

        <h2 class="text-center mb-4">Change Password</h2>
        <form asp-action="ChangePassword" method="post" id="changePasswordForm">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="mb-3">
                <label asp-for="Email" class="form-label"></label>
                <input asp-for="Email" class="form-control" readonly />
                <span asp-validation-for="Email" class="text-danger validation-message"></span>
            </div>
            <div class="mb-3">
                <label asp-for="NewPassword" class="form-label"></label>
                <input asp-for="NewPassword" class="form-control" type="password" id="newPassword" />
                <span asp-validation-for="NewPassword" class="text-danger validation-message"></span>
                <div id="passwordStrength" class="password-strength"></div>
                <div id="passwordError" class="error-message"></div>
            </div>
            <div class="mb-3">
                <label asp-for="ConfirmNewPassword" class="form-label"></label>
                <input asp-for="ConfirmNewPassword" class="form-control" type="password" id="confirmPassword" />
                <span asp-validation-for="ConfirmNewPassword" class="text-danger validation-message"></span>
                <div id="confirmError" class="error-message"></div>
            </div>
            <input type="submit" value="Submit" class="btn btn-success w-100 p-2" />
            <div class="text-center mt-2">
                <a asp-controller="Account" asp-action="VerifyEmail" class="text-decoration-none mt-3">Back</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const newPasswordInput = document.getElementById('newPassword');
            const confirmPasswordInput = document.getElementById('confirmPassword');
            const passwordStrength = document.getElementById('passwordStrength');
            const passwordError = document.getElementById('passwordError');
            const confirmError = document.getElementById('confirmError');

            // Password strength checker
            function checkPasswordStrength(password) {
                let strength = 0;
                let feedback = '';

                if (password.length >= 8) strength++;
                if (/[a-z]/.test(password)) strength++;
                if (/[A-Z]/.test(password)) strength++;
                if (/\d/.test(password)) strength++;
                if (/[$!%*?&]/.test(password)) strength++;

                if (strength < 3) {
                    feedback = '<span class="strength-weak">كلمة مرور ضعيفة</span>';
                } else if (strength < 5) {
                    feedback = '<span class="strength-medium">كلمة مرور متوسطة</span>';
                } else {
                    feedback = '<span class="strength-strong">كلمة مرور قوية</span>';
                }

                passwordStrength.innerHTML = feedback;
            }

            // Validate password requirements
            function validatePassword(password) {
                const errors = [];
                
                if (password.length < 8) {
                    errors.push('كلمة المرور يجب أن تكون 8 أحرف على الأقل');
                }
                if (!/[a-z]/.test(password)) {
                    errors.push('يجب أن تحتوي على حرف صغير واحد على الأقل');
                }
                if (!/[A-Z]/.test(password)) {
                    errors.push('يجب أن تحتوي على حرف كبير واحد على الأقل');
                }
                if (!/\d/.test(password)) {
                    errors.push('يجب أن تحتوي على رقم واحد على الأقل');
                }
                if (!/[$!%*?&]/.test(password)) {
                    errors.push('يجب أن تحتوي على رمز خاص واحد على الأقل ($!%*?&)');
                }

                return errors;
            }

            // Show/hide error messages
            function showError(element, message) {
                element.style.display = 'block';
                element.textContent = message;
            }

            function hideError(element) {
                element.style.display = 'none';
                element.textContent = '';
            }

            // Real-time password validation
            newPasswordInput.addEventListener('input', function() {
                const password = this.value;
                
                if (password.length > 0) {
                    checkPasswordStrength(password);
                    
                    const errors = validatePassword(password);
                    if (errors.length > 0) {
                        this.classList.add('is-invalid');
                        this.classList.remove('is-valid');
                        showError(passwordError, errors[0]); // Show first error only
                    } else {
                        this.classList.remove('is-invalid');
                        this.classList.add('is-valid');
                        hideError(passwordError);
                    }
                } else {
                    this.classList.remove('is-invalid', 'is-valid');
                    hideError(passwordError);
                    passwordStrength.innerHTML = '';
                }

                // Check confirm password match
                if (confirmPasswordInput.value) {
                    checkPasswordMatch();
                }
            });

            // Real-time confirm password validation
            confirmPasswordInput.addEventListener('input', function() {
                checkPasswordMatch();
            });

            function checkPasswordMatch() {
                const password = newPasswordInput.value;
                const confirmPassword = confirmPasswordInput.value;
                
                if (confirmPassword.length > 0) {
                    if (password !== confirmPassword) {
                        confirmPasswordInput.classList.add('is-invalid');
                        confirmPasswordInput.classList.remove('is-valid');
                        showError(confirmError, 'كلمات المرور غير متطابقة');
                    } else {
                        confirmPasswordInput.classList.remove('is-invalid');
                        confirmPasswordInput.classList.add('is-valid');
                        hideError(confirmError);
                    }
                } else {
                    confirmPasswordInput.classList.remove('is-invalid', 'is-valid');
                    hideError(confirmError);
                }
            }

            // Form submission validation
            document.getElementById('changePasswordForm').addEventListener('submit', function(e) {
                const password = newPasswordInput.value;
                const confirmPassword = confirmPasswordInput.value;
                
                // Validate password
                const passwordErrors = validatePassword(password);
                if (passwordErrors.length > 0) {
                    e.preventDefault();
                    showError(passwordError, passwordErrors[0]);
                    newPasswordInput.classList.add('is-invalid');
                    return false;
                }
                
                // Validate password match
                if (password !== confirmPassword) {
                    e.preventDefault();
                    showError(confirmError, 'كلمات المرور غير متطابقة');
                    confirmPasswordInput.classList.add('is-invalid');
                    return false;
                }
            });
        });
    </script>
}